select * from functional_kudu.testtbl
---- PLAN
PLAN-ROOT SINK [OUTPUT-EXPRS=(functional_kudu.testtbl.id, functional_kudu.testtbl.name,
|  functional_kudu.testtbl.zip)]
|
00:SCAN KUDU [functional_kudu.testtbl]
---- SCANRANGELOCATIONS
NODE 0:
  ScanToken{table=testtbl, hash-partition-buckets: [0], range-partition: [<start>, <end>)}
  ScanToken{table=testtbl, hash-partition-buckets: [1], range-partition: [<start>, <end>)}
  ScanToken{table=testtbl, hash-partition-buckets: [2], range-partition: [<start>, <end>)}
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK [OUTPUT-EXPRS=(functional_kudu.testtbl.id, functional_kudu.testtbl.name,
|  functional_kudu.testtbl.zip)]
|
01:EXCHANGE [UNPARTITIONED]
|
00:SCAN KUDU [functional_kudu.testtbl]
====
select * from functional_kudu.testtbl where name = '10'
---- PLAN
PLAN-ROOT SINK [OUTPUT-EXPRS=(functional_kudu.testtbl.id, functional_kudu.testtbl.name,
|  functional_kudu.testtbl.zip)]
|
00:SCAN KUDU [functional_kudu.testtbl]
   kudu predicates: name = '10'
---- SCANRANGELOCATIONS
NODE 0:
  ScanToken{table=testtbl, hash-partition-buckets: [0], range-partition: [<start>, <end>)}
  ScanToken{table=testtbl, hash-partition-buckets: [1], range-partition: [<start>, <end>)}
  ScanToken{table=testtbl, hash-partition-buckets: [2], range-partition: [<start>, <end>)}
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK [OUTPUT-EXPRS=(functional_kudu.testtbl.id, functional_kudu.testtbl.name,
|  functional_kudu.testtbl.zip)]
|
01:EXCHANGE [UNPARTITIONED]
|
00:SCAN KUDU [functional_kudu.testtbl]
   kudu predicates: name = '10'
====
select * from functional_kudu.testtbl where name = NULL
---- PLAN
PLAN-ROOT SINK [OUTPUT-EXPRS=(functional_kudu.testtbl.id, functional_kudu.testtbl.name,
|  functional_kudu.testtbl.zip)]
|
00:SCAN KUDU [functional_kudu.testtbl]
   predicates: name = NULL
====
insert into functional_kudu.testtbl(id) values (10)
---- PLAN
INSERT INTO KUDU [functional_kudu.testtbl, OUTPUT-EXPRS=(10, NULL, NULL)]
|  check unique keys:
|  false
|
00:UNION
   constant-operands=1
---- DISTRIBUTEDPLAN
INSERT INTO KUDU [functional_kudu.testtbl, OUTPUT-EXPRS=(10, NULL, NULL)]
|  check unique keys:
|  false
|
00:UNION
   constant-operands=1
====
insert into functional_kudu.testtbl(id) select int_col from functional_kudu.tinyinttable
---- PLAN
INSERT INTO KUDU [functional_kudu.testtbl, OUTPUT-EXPRS=(int_col, NULL, NULL)]
|  check unique keys:
|  false
|
00:SCAN KUDU [functional_kudu.tinyinttable]
---- DISTRIBUTEDPLAN
INSERT INTO KUDU [functional_kudu.testtbl, OUTPUT-EXPRS=(int_col, NULL, NULL)]
|  check unique keys:
|  false
|
00:SCAN KUDU [functional_kudu.tinyinttable]
====
insert into functional_kudu.testtbl(id, name)
select count(distinct id), name from functional_kudu.dimtbl
group by name
---- PLAN
INSERT INTO KUDU [functional_kudu.testtbl, OUTPUT-EXPRS=(count(id), name, NULL)]
|  check unique
|  keys: false
|
02:AGGREGATE [FINALIZE]
|  output: count(id)
|  group by: name
|
01:AGGREGATE
|  group by: name, id
|
00:SCAN KUDU [functional_kudu.dimtbl]
---- DISTRIBUTEDPLAN
INSERT INTO KUDU [functional_kudu.testtbl, OUTPUT-EXPRS=(count(id), name, NULL)]
|  check unique
|  keys: false
|
02:AGGREGATE [FINALIZE]
|  output: count(id)
|  group by: name
|
04:AGGREGATE
|  group by: name, id
|
03:EXCHANGE [HASH(name)]
|
01:AGGREGATE [STREAMING]
|  group by: name, id
|
00:SCAN KUDU [functional_kudu.dimtbl]
====
# All predicates can be pushed down.
select * from functional_kudu.testtbl
where id >= 10 and zip <= 5 and 20 >= id and 'foo' = name and zip >= 0 and 30 >= zip
and zip > 1 and zip < 50
---- PLAN
PLAN-ROOT SINK [OUTPUT-EXPRS=(functional_kudu.testtbl.id, functional_kudu.testtbl.name,
|  functional_kudu.testtbl.zip)]
|
00:SCAN KUDU [functional_kudu.testtbl]
   kudu predicates: id >= 10, zip <= 5, id <= 20, zip >= 0, zip <= 30, zip > 1, zip < 50, name = 'foo'
---- SCANRANGELOCATIONS
NODE 0:
  ScanToken{table=testtbl, hash-partition-buckets: [0], range-partition: [<start>, <end>)}
  ScanToken{table=testtbl, hash-partition-buckets: [1], range-partition: [<start>, <end>)}
  ScanToken{table=testtbl, hash-partition-buckets: [2], range-partition: [<start>, <end>)}
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK [OUTPUT-EXPRS=(functional_kudu.testtbl.id, functional_kudu.testtbl.name,
|  functional_kudu.testtbl.zip)]
|
01:EXCHANGE [UNPARTITIONED]
|
00:SCAN KUDU [functional_kudu.testtbl]
   kudu predicates: id >= 10, zip <= 5, id <= 20, zip >= 0, zip <= 30, zip > 1, zip < 50, name = 'foo'
====
# Test constant folding.
select * from functional_kudu.testtbl
where id < 10 + 30  and cast(sin(id) as boolean) = true and 20 * 3 >= id and 10 * 10 + 3 > id
---- PLAN
PLAN-ROOT SINK [OUTPUT-EXPRS=(functional_kudu.testtbl.id, functional_kudu.testtbl.name,
|  functional_kudu.testtbl.zip)]
|
00:SCAN KUDU [functional_kudu.testtbl]
   predicates: CAST(sin(id) AS BOOLEAN) = TRUE
   kudu predicates: id < 40, id <= 60, id < 103
---- SCANRANGELOCATIONS
NODE 0:
  ScanToken{table=testtbl, hash-partition-buckets: [0], range-partition: [<start>, <end>)}
  ScanToken{table=testtbl, hash-partition-buckets: [1], range-partition: [<start>, <end>)}
  ScanToken{table=testtbl, hash-partition-buckets: [2], range-partition: [<start>, <end>)}
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK [OUTPUT-EXPRS=(functional_kudu.testtbl.id, functional_kudu.testtbl.name,
|  functional_kudu.testtbl.zip)]
|
01:EXCHANGE [UNPARTITIONED]
|
00:SCAN KUDU [functional_kudu.testtbl]
   predicates: CAST(sin(id) AS BOOLEAN) = TRUE
   kudu predicates: id < 40, id <= 60, id < 103
====
# Some predicates can be pushed down but others can't (predicate on an non-const value).
select * from functional_kudu.testtbl
where cast(sin(id) as boolean) = true and name = 'a'
---- PLAN
PLAN-ROOT SINK [OUTPUT-EXPRS=(functional_kudu.testtbl.id, functional_kudu.testtbl.name,
|  functional_kudu.testtbl.zip)]
|
00:SCAN KUDU [functional_kudu.testtbl]
   predicates: CAST(sin(id) AS BOOLEAN) = TRUE
   kudu predicates: name = 'a'
---- SCANRANGELOCATIONS
NODE 0:
  ScanToken{table=testtbl, hash-partition-buckets: [0], range-partition: [<start>, <end>)}
  ScanToken{table=testtbl, hash-partition-buckets: [1], range-partition: [<start>, <end>)}
  ScanToken{table=testtbl, hash-partition-buckets: [2], range-partition: [<start>, <end>)}
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK [OUTPUT-EXPRS=(functional_kudu.testtbl.id, functional_kudu.testtbl.name,
|  functional_kudu.testtbl.zip)]
|
01:EXCHANGE [UNPARTITIONED]
|
00:SCAN KUDU [functional_kudu.testtbl]
   predicates: CAST(sin(id) AS BOOLEAN) = TRUE
   kudu predicates: name = 'a'
====
# No predicates can be pushed down (predicate on a non-const value and
# non-binary predicate). There is a single tablet so no partition pruning.
select * from functional_kudu.testtbl
where cast(sin(id) as boolean) = true and name is null
---- PLAN
PLAN-ROOT SINK [OUTPUT-EXPRS=(functional_kudu.testtbl.id, functional_kudu.testtbl.name,
|  functional_kudu.testtbl.zip)]
|
00:SCAN KUDU [functional_kudu.testtbl]
   predicates: name IS NULL, CAST(sin(id) AS BOOLEAN) = TRUE
---- SCANRANGELOCATIONS
NODE 0:
  ScanToken{table=testtbl, hash-partition-buckets: [0], range-partition: [<start>, <end>)}
  ScanToken{table=testtbl, hash-partition-buckets: [1], range-partition: [<start>, <end>)}
  ScanToken{table=testtbl, hash-partition-buckets: [2], range-partition: [<start>, <end>)}
---- DISTRIBUTEDPLAN
PLAN-ROOT SINK [OUTPUT-EXPRS=(functional_kudu.testtbl.id, functional_kudu.testtbl.name,
|  functional_kudu.testtbl.zip)]
|
01:EXCHANGE [UNPARTITIONED]
|
00:SCAN KUDU [functional_kudu.testtbl]
   predicates: name IS NULL, CAST(sin(id) AS BOOLEAN) = TRUE
====
# IMPALA-3856: KuduScanNode crash when pushing predicates including a cast
select o_orderkey from tpch_kudu.orders where o_orderkey < 10.0 order by 1
---- PLAN
====
# IMPALA-3871: Casting literals to TIMESTAMP throw when pushed to KuduScanNode
select t.c from
  (select cast(o_orderdate as timestamp) c from tpch_kudu.orders where o_orderkey < 10) t
where t.c <= cast('1995-01-01 00:00:00' as timestamp) order by c
---- PLAN
====
# IMPALA-4213: Planner not pushing some predicates with constant exprs to Kudu
select count(*) from functional_kudu.alltypes
where id < 1475059765 + 10
and 1475059765 + 100 < id
---- PLAN
====
